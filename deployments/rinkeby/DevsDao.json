{
  "address": "0x9991A28B512C2C53236620aD6F43a6f0cfDE67Ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fakeNftMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cryptoDevs",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yayVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nayVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum DevsDao.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb3a7734aec4b4872421e70929107176fad028f1c220279cdc31d5a99a0ce334f",
  "receipt": {
    "to": null,
    "from": "0xb7b328821cE10D2ebfBA4c4f153DC4A8c7a607CB",
    "contractAddress": "0x9991A28B512C2C53236620aD6F43a6f0cfDE67Ef",
    "transactionIndex": 11,
    "gasUsed": "1220726",
    "logsBloom": "0x
    "blockHash": "0x340abbbe5cabf5020a44a507e2a4eb81feeb1d416356d16ded01199ca72fac1d",
    "transactionHash": "0xb3a7734aec4b4872421e70929107176fad028f1c220279cdc31d5a99a0ce334f",
    "logs": [],
    "blockNumber": 11416070,
    "cumulativeGasUsed": "2434252",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7F58B8F3b3c16F9d6f5d6a4670A69068037c1c61",
    "0x678aE8Cb1DFbf3374B1aa9eBc8B94bF61C037BD4"
  ],
  "numDeployments": 1,
  "solcInputHash": "17336f2de2b195d9902d7268cb67e3a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fakeNftMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoDevs\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yayVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum DevsDao.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createProposal(uint256)\":{\"details\":\"createProposal allows a CryptoDevsNFT holder to create a new proposal in the DAO\",\"params\":{\"_tokenId\":\"- the tokenID of the NFT to be purchased from FakeNFTMarketplace if this proposal passes\"},\"returns\":{\"_0\":\"Returns the proposal index for the newly created proposal\"}},\"executeProposal(uint256)\":{\"details\":\"executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded\",\"params\":{\"proposalIndex\":\"- the index of the proposal to execute in the proposals array\"}},\"voteOnProposal(uint256,uint8)\":{\"details\":\"voteOnProposal allows a CryptoDevsNFT holder to cast their vote on an active proposal\",\"params\":{\"proposalIndex\":\"- the index of the proposal to vote on in the proposals array\",\"vote\":\"- the type of vote they want to cast\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DevsDao.sol\":\"DevsDao\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DevsDao.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./ICryptoDevs.sol\\\";\\r\\nimport \\\"./IFakeNFTMarket.sol\\\";\\r\\n\\r\\ncontract DevsDao {\\r\\n    //create a mapping from proposal id to Proposal struct\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    uint256 public numOfProposal;\\r\\n    address owner;\\r\\n    IFakeNFTMarket fakeNftMarket;\\r\\n    ICryptoDevs cryptoDevs;\\r\\n    // SINCE every vote can either be Yes of No we can create an enum of votes\\r\\n    enum Vote {\\r\\n        Yes,\\r\\n        No\\r\\n    }\\r\\n    // Create a struct named Proposal containing all relevant information\\r\\n    struct Proposal {\\r\\n        // nftTokenId - the tokenID of the NFT to purchase from FakeNFTMarketplace if the proposal passes\\r\\n        uint256 nftTokenId;\\r\\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\\r\\n        uint256 deadline;\\r\\n        // yayVotes - number of yay votes for this proposal\\r\\n        uint256 yayVotes;\\r\\n        // nayVotes - number of nay votes for this proposal\\r\\n        uint256 nayVotes;\\r\\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\\r\\n        bool executed;\\r\\n        // voters - a mapping of CryptoDevsNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not\\r\\n        mapping(uint256 => bool) voters;\\r\\n    }\\r\\n\\r\\n    // create a payable contructor that initializes the interfaces with their respective contract addresses\\r\\n    constructor(address _fakeNftMarket, address _cryptoDevs) payable {\\r\\n        fakeNftMarket = IFakeNFTMarket(_fakeNftMarket);\\r\\n        cryptoDevs = ICryptoDevs(_cryptoDevs);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //MODIFIERS\\r\\n\\r\\n    // create a modifier that allows only people with the cryptodevs nft to call a function\\r\\n    modifier onlyNftHolder() {\\r\\n        require(\\r\\n            cryptoDevs.balanceOf(msg.sender) > 0,\\r\\n            \\\"You dont own any NFT, not a DAO member\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyContractOwner() {\\r\\n        require(msg.sender == owner, \\\"NOT OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n    //active proposals\\r\\n    modifier onlyActiveProposal(uint256 _proposalIndex) {\\r\\n        require(\\r\\n            proposals[_proposalIndex].deadline > block.timestamp,\\r\\n            \\\"Proposal is inactive\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    modifier inactiveProposalOnly(uint256 proposalIndex) {\\r\\n        require(\\r\\n            proposals[proposalIndex].deadline <= block.timestamp,\\r\\n            \\\"DEADLINE_NOT_EXCEEDED\\\"\\r\\n        );\\r\\n        require(\\r\\n            proposals[proposalIndex].executed == false,\\r\\n            \\\"PROPOSAL_ALREADY_EXECUTED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev createProposal allows a CryptoDevsNFT holder to create a new proposal in the DAO\\r\\n    /// @param _tokenId - the tokenID of the NFT to be purchased from FakeNFTMarketplace if this proposal passes\\r\\n    /// @return Returns the proposal index for the newly created proposal\\r\\n    function createProposal(uint256 _tokenId)\\r\\n        external\\r\\n        onlyNftHolder\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(fakeNftMarket.available(_tokenId), \\\"NFT not Available\\\");\\r\\n        // create a new instance of the proposal struct\\r\\n        Proposal storage proposal = proposals[numOfProposal];\\r\\n        // set the NFT token id in the Proposal struct\\r\\n        proposal.nftTokenId = _tokenId;\\r\\n        // set deadline\\r\\n        proposal.deadline = block.timestamp + 5 minutes;\\r\\n        // increment the total number of proposals\\r\\n        numOfProposal++;\\r\\n        //  return the current proposal\\r\\n        return numOfProposal - 1;\\r\\n    }\\r\\n\\r\\n    /// @dev voteOnProposal allows a CryptoDevsNFT holder to cast their vote on an active proposal\\r\\n    /// @param proposalIndex - the index of the proposal to vote on in the proposals array\\r\\n    /// @param vote - the type of vote they want to cast\\r\\n    function voteOnProposal(uint256 proposalIndex, Vote vote)\\r\\n        external\\r\\n        onlyNftHolder\\r\\n        onlyActiveProposal(proposalIndex)\\r\\n    {\\r\\n        Proposal storage proposal = proposals[proposalIndex];\\r\\n        uint256 voterNFTBalance = cryptoDevs.balanceOf(msg.sender);\\r\\n        uint256 numVotes = 0;\\r\\n\\r\\n        // Calculate how many NFTs are owned by the voter\\r\\n        // that haven't already been used for voting on this proposal\\r\\n\\r\\n        for (uint256 i = 0; i < voterNFTBalance; i++) {\\r\\n            uint256 tokenId = cryptoDevs.tokenOfOwnerByIndex(msg.sender, i);\\r\\n            if (proposal.voters[tokenId] == false) {\\r\\n                numVotes++;\\r\\n                proposal.voters[tokenId] = true;\\r\\n            }\\r\\n        }\\r\\n        require(numVotes > 0, \\\"ALREADY_VOTED\\\");\\r\\n\\r\\n        if (vote == Vote.Yes) {\\r\\n            proposal.yayVotes += numVotes;\\r\\n        } else {\\r\\n            proposal.nayVotes += numVotes;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded\\r\\n    /// @param proposalIndex - the index of the proposal to execute in the proposals array\\r\\n    function executeProposal(uint256 proposalIndex)\\r\\n        external\\r\\n        onlyNftHolder\\r\\n        inactiveProposalOnly(proposalIndex)\\r\\n    {\\r\\n        Proposal storage proposal = proposals[proposalIndex];\\r\\n\\r\\n        // If the proposal has more YAY votes than NAY votes\\r\\n        // purchase the NFT from the FakeNFTMarketplace\\r\\n        if (proposal.yayVotes > proposal.nayVotes) {\\r\\n            uint256 nftPrice = fakeNftMarket.getPrice();\\r\\n            require(address(this).balance >= nftPrice, \\\"NOT_ENOUGH_FUNDS\\\");\\r\\n            fakeNftMarket.purchase{value: nftPrice}(proposal.nftTokenId);\\r\\n        }\\r\\n        proposal.executed = true;\\r\\n    }\\r\\n\\r\\n    // allow only the deployer to withdraw ETH\\r\\n    function withdrawEther() external onlyContractOwner {\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    //The following two functions allow the contract to accept ETH deposits\\r\\n    // directly from a wallet without calling a function\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x795e6c96f29a574a498bfba30190e95580bde4dadcb57a73b463eff099fad5ba\",\"license\":\"MIT\"},\"contracts/ICryptoDevs.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\ninterface ICryptoDevs {\\r\\n    /// @dev balanceOf returns the number of NFTs owned by the given address\\r\\n    /// @param owner - address to fetch number of NFTs for\\r\\n    /// @return Returns the number of NFTs owned\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    /// @dev tokenOfOwnerByIndex returns a tokenID at given index for owner\\r\\n    /// @param owner - address to fetch the NFT TokenID for\\r\\n    /// @param index - index of NFT in owned tokens array to fetch\\r\\n    /// @return Returns the TokenID of the NFT\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x9e29e1b6181f851c2ea66d69f8fa477b56f689d454485e4a183d8a22f7c044b6\",\"license\":\"MIT\"},\"contracts/IFakeNFTMarket.sol\":{\"content\":\"pragma solidity ^0.8.1;\\r\\n\\r\\ninterface IFakeNFTMarket {\\r\\n    // purchase nft from the marketplace\\r\\n    function purchase(uint256 _tokenId) external payable;\\r\\n\\r\\n    // get the nnft price\\r\\n    function getPrice() external view returns (uint256);\\r\\n\\r\\n    // check available nfts\\r\\n    function available(uint256 _tokenId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xce7fc7bf27a691ede1ad89dd06aa294162ba37af76af5507dd33b78846899472\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c8063013cf08b146100625780630d61b519146100a3578063275b89af146100cc5780635a43dc00146100f75780637362377b14610134578063efafb22e1461014b57610060565b3661006057005b005b34801561006e57600080fd5b5061008960048036038101906100849190610c9e565b610174565b60405161009a959493929190610cf5565b60405180910390f35b3480156100af57600080fd5b506100ca60048036038101906100c59190610c9e565b6101b7565b005b3480156100d857600080fd5b506100e1610529565b6040516100ee9190610d48565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610c9e565b61052f565b60405161012b9190610d48565b60405180910390f35b34801561014057600080fd5b5061014961076c565b005b34801561015757600080fd5b50610172600480360381019061016d9190610d88565b610867565b005b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102149190610e09565b60206040518083038186803b15801561022c57600080fd5b505afa158015610240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102649190610e39565b116102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b90610ee9565b60405180910390fd5b80426000808381526020019081526020016000206001015411156102fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490610f55565b60405180910390fd5b6000151560008083815260200190815260200160002060040160009054906101000a900460ff16151514610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d90610fc1565b60405180910390fd5b60008060008481526020019081526020016000209050806003015481600201541115610507576000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f657600080fd5b505afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190610e39565b905080471015610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a9061102d565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18284600001546040518363ffffffff1660e01b81526004016104d39190610d48565b6000604051808303818588803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b5050505050505b60018160040160006101000a81548160ff021916908315150217905550505050565b60015481565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161058d9190610e09565b60206040518083038186803b1580156105a557600080fd5b505afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610e39565b1161061d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061490610ee9565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8836040518263ffffffff1660e01b81526004016106789190610d48565b60206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190611079565b610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe906110f2565b60405180910390fd5b60008060006001548152602001908152602001600020905082816000018190555061012c426107369190611141565b81600101819055506001600081548092919061075190611197565b91905055506001805461076491906111e0565b915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390611260565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610864573d6000803e3d6000fd5b50565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108c49190610e09565b60206040518083038186803b1580156108dc57600080fd5b505afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190610e39565b11610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90610ee9565b60405180910390fd5b814260008083815260200190815260200160002060010154116109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a3906112cc565b60405180910390fd5b600080600085815260200190815260200160002090506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610a1f9190610e09565b60206040518083038186803b158015610a3757600080fd5b505afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190610e39565b90506000805b82811015610bae576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b8152600401610adc9291906112ec565b60206040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c9190610e39565b90506000151585600501600083815260200190815260200160002060009054906101000a900460ff1615151415610b9a578280610b6890611197565b935050600185600501600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505b508080610ba690611197565b915050610a75565b5060008111610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990611361565b60405180910390fd5b60006001811115610c0657610c05611381565b5b856001811115610c1957610c18611381565b5b1415610c3f5780836002016000828254610c339190611141565b92505081905550610c5b565b80836003016000828254610c539190611141565b925050819055505b505050505050565b600080fd5b6000819050919050565b610c7b81610c68565b8114610c8657600080fd5b50565b600081359050610c9881610c72565b92915050565b600060208284031215610cb457610cb3610c63565b5b6000610cc284828501610c89565b91505092915050565b610cd481610c68565b82525050565b60008115159050919050565b610cef81610cda565b82525050565b600060a082019050610d0a6000830188610ccb565b610d176020830187610ccb565b610d246040830186610ccb565b610d316060830185610ccb565b610d3e6080830184610ce6565b9695505050505050565b6000602082019050610d5d6000830184610ccb565b92915050565b60028110610d7057600080fd5b50565b600081359050610d8281610d63565b92915050565b60008060408385031215610d9f57610d9e610c63565b5b6000610dad85828601610c89565b9250506020610dbe85828601610d73565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610df382610dc8565b9050919050565b610e0381610de8565b82525050565b6000602082019050610e1e6000830184610dfa565b92915050565b600081519050610e3381610c72565b92915050565b600060208284031215610e4f57610e4e610c63565b5b6000610e5d84828501610e24565b91505092915050565b600082825260208201905092915050565b7f596f7520646f6e74206f776e20616e79204e46542c206e6f7420612044414f2060008201527f6d656d6265720000000000000000000000000000000000000000000000000000602082015250565b6000610ed3602683610e66565b9150610ede82610e77565b604082019050919050565b60006020820190508181036000830152610f0281610ec6565b9050919050565b7f444541444c494e455f4e4f545f45584345454445440000000000000000000000600082015250565b6000610f3f601583610e66565b9150610f4a82610f09565b602082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b7f50524f504f53414c5f414c52454144595f455845435554454400000000000000600082015250565b6000610fab601983610e66565b9150610fb682610f75565b602082019050919050565b60006020820190508181036000830152610fda81610f9e565b9050919050565b7f4e4f545f454e4f5547485f46554e445300000000000000000000000000000000600082015250565b6000611017601083610e66565b915061102282610fe1565b602082019050919050565b600060208201905081810360008301526110468161100a565b9050919050565b61105681610cda565b811461106157600080fd5b50565b6000815190506110738161104d565b92915050565b60006020828403121561108f5761108e610c63565b5b600061109d84828501611064565b91505092915050565b7f4e4654206e6f7420417661696c61626c65000000000000000000000000000000600082015250565b60006110dc601183610e66565b91506110e7826110a6565b602082019050919050565b6000602082019050818103600083015261110b816110cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061114c82610c68565b915061115783610c68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561118c5761118b611112565b5b828201905092915050565b60006111a282610c68565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d5576111d4611112565b5b600182019050919050565b60006111eb82610c68565b91506111f683610c68565b92508282101561120957611208611112565b5b828203905092915050565b7f4e4f54204f574e45520000000000000000000000000000000000000000000000600082015250565b600061124a600983610e66565b915061125582611214565b602082019050919050565b600060208201905081810360008301526112798161123d565b9050919050565b7f50726f706f73616c20697320696e616374697665000000000000000000000000600082015250565b60006112b6601483610e66565b91506112c182611280565b602082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b60006040820190506113016000830185610dfa565b61130e6020830184610ccb565b9392505050565b7f414c52454144595f564f54454400000000000000000000000000000000000000600082015250565b600061134b600d83610e66565b915061135682611315565b602082019050919050565b6000602082019050818103600083015261137a8161133e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220377d8a058b747fce57689e62538248fa1c4073d6d6a79cc38f5ec9984b3ddbaf64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createProposal(uint256)": {
        "details": "createProposal allows a CryptoDevsNFT holder to create a new proposal in the DAO",
        "params": {
          "_tokenId": "- the tokenID of the NFT to be purchased from FakeNFTMarketplace if this proposal passes"
        },
        "returns": {
          "_0": "Returns the proposal index for the newly created proposal"
        }
      },
      "executeProposal(uint256)": {
        "details": "executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded",
        "params": {
          "proposalIndex": "- the index of the proposal to execute in the proposals array"
        }
      },
      "voteOnProposal(uint256,uint8)": {
        "details": "voteOnProposal allows a CryptoDevsNFT holder to cast their vote on an active proposal",
        "params": {
          "proposalIndex": "- the index of the proposal to vote on in the proposals array",
          "vote": "- the type of vote they want to cast"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 144,
        "contract": "contracts/DevsDao.sol:DevsDao",
        "label": "proposals",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Proposal)172_storage)"
      },
      {
        "astId": 146,
        "contract": "contracts/DevsDao.sol:DevsDao",
        "label": "numOfProposal",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 148,
        "contract": "contracts/DevsDao.sol:DevsDao",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 151,
        "contract": "contracts/DevsDao.sol:DevsDao",
        "label": "fakeNftMarket",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFakeNFTMarket)607"
      },
      {
        "astId": 154,
        "contract": "contracts/DevsDao.sol:DevsDao",
        "label": "cryptoDevs",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICryptoDevs)587"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoDevs)587": {
        "encoding": "inplace",
        "label": "contract ICryptoDevs",
        "numberOfBytes": "20"
      },
      "t_contract(IFakeNFTMarket)607": {
        "encoding": "inplace",
        "label": "contract IFakeNFTMarket",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)172_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DevsDao.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)172_storage"
      },
      "t_struct(Proposal)172_storage": {
        "encoding": "inplace",
        "label": "struct DevsDao.Proposal",
        "members": [
          {
            "astId": 159,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 161,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 163,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "yayVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 165,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "nayVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 167,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "executed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 171,
            "contract": "contracts/DevsDao.sol:DevsDao",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}