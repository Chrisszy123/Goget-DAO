{
  "language": "Solidity",
  "sources": {
    "contracts/DevsDao.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ICryptoDevs.sol\";\r\nimport \"./IFakeNFTMarket.sol\";\r\n\r\ncontract DevsDao {\r\n    //create a mapping from proposal id to Proposal struct\r\n    mapping(uint256 => Proposal) public proposals;\r\n    uint256 public numOfProposal;\r\n    address owner;\r\n    IFakeNFTMarket fakeNftMarket;\r\n    ICryptoDevs cryptoDevs;\r\n    // SINCE every vote can either be Yes of No we can create an enum of votes\r\n    enum Vote {\r\n        Yes,\r\n        No\r\n    }\r\n    // Create a struct named Proposal containing all relevant information\r\n    struct Proposal {\r\n        // nftTokenId - the tokenID of the NFT to purchase from FakeNFTMarketplace if the proposal passes\r\n        uint256 nftTokenId;\r\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\r\n        uint256 deadline;\r\n        // yayVotes - number of yay votes for this proposal\r\n        uint256 yayVotes;\r\n        // nayVotes - number of nay votes for this proposal\r\n        uint256 nayVotes;\r\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\r\n        bool executed;\r\n        // voters - a mapping of CryptoDevsNFT tokenIDs to booleans indicating whether that NFT has already been used to cast a vote or not\r\n        mapping(uint256 => bool) voters;\r\n    }\r\n\r\n    // create a payable contructor that initializes the interfaces with their respective contract addresses\r\n    constructor(address _fakeNftMarket, address _cryptoDevs) payable {\r\n        fakeNftMarket = IFakeNFTMarket(_fakeNftMarket);\r\n        cryptoDevs = ICryptoDevs(_cryptoDevs);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //MODIFIERS\r\n\r\n    // create a modifier that allows only people with the cryptodevs nft to call a function\r\n    modifier onlyNftHolder() {\r\n        require(\r\n            cryptoDevs.balanceOf(msg.sender) > 0,\r\n            \"You dont own any NFT, not a DAO member\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == owner, \"NOT OWNER\");\r\n        _;\r\n    }\r\n    //active proposals\r\n    modifier onlyActiveProposal(uint256 _proposalIndex) {\r\n        require(\r\n            proposals[_proposalIndex].deadline > block.timestamp,\r\n            \"Proposal is inactive\"\r\n        );\r\n        _;\r\n    }\r\n    modifier inactiveProposalOnly(uint256 proposalIndex) {\r\n        require(\r\n            proposals[proposalIndex].deadline <= block.timestamp,\r\n            \"DEADLINE_NOT_EXCEEDED\"\r\n        );\r\n        require(\r\n            proposals[proposalIndex].executed == false,\r\n            \"PROPOSAL_ALREADY_EXECUTED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev createProposal allows a CryptoDevsNFT holder to create a new proposal in the DAO\r\n    /// @param _tokenId - the tokenID of the NFT to be purchased from FakeNFTMarketplace if this proposal passes\r\n    /// @return Returns the proposal index for the newly created proposal\r\n    function createProposal(uint256 _tokenId)\r\n        external\r\n        onlyNftHolder\r\n        returns (uint256)\r\n    {\r\n        require(fakeNftMarket.available(_tokenId), \"NFT not Available\");\r\n        // create a new instance of the proposal struct\r\n        Proposal storage proposal = proposals[numOfProposal];\r\n        // set the NFT token id in the Proposal struct\r\n        proposal.nftTokenId = _tokenId;\r\n        // set deadline\r\n        proposal.deadline = block.timestamp + 5 minutes;\r\n        // increment the total number of proposals\r\n        numOfProposal++;\r\n        //  return the current proposal\r\n        return numOfProposal - 1;\r\n    }\r\n\r\n    /// @dev voteOnProposal allows a CryptoDevsNFT holder to cast their vote on an active proposal\r\n    /// @param proposalIndex - the index of the proposal to vote on in the proposals array\r\n    /// @param vote - the type of vote they want to cast\r\n    function voteOnProposal(uint256 proposalIndex, Vote vote)\r\n        external\r\n        onlyNftHolder\r\n        onlyActiveProposal(proposalIndex)\r\n    {\r\n        Proposal storage proposal = proposals[proposalIndex];\r\n        uint256 voterNFTBalance = cryptoDevs.balanceOf(msg.sender);\r\n        uint256 numVotes = 0;\r\n\r\n        // Calculate how many NFTs are owned by the voter\r\n        // that haven't already been used for voting on this proposal\r\n\r\n        for (uint256 i = 0; i < voterNFTBalance; i++) {\r\n            uint256 tokenId = cryptoDevs.tokenOfOwnerByIndex(msg.sender, i);\r\n            if (proposal.voters[tokenId] == false) {\r\n                numVotes++;\r\n                proposal.voters[tokenId] = true;\r\n            }\r\n        }\r\n        require(numVotes > 0, \"ALREADY_VOTED\");\r\n\r\n        if (vote == Vote.Yes) {\r\n            proposal.yayVotes += numVotes;\r\n        } else {\r\n            proposal.nayVotes += numVotes;\r\n        }\r\n    }\r\n\r\n    /// @dev executeProposal allows any CryptoDevsNFT holder to execute a proposal after it's deadline has been exceeded\r\n    /// @param proposalIndex - the index of the proposal to execute in the proposals array\r\n    function executeProposal(uint256 proposalIndex)\r\n        external\r\n        onlyNftHolder\r\n        inactiveProposalOnly(proposalIndex)\r\n    {\r\n        Proposal storage proposal = proposals[proposalIndex];\r\n\r\n        // If the proposal has more YAY votes than NAY votes\r\n        // purchase the NFT from the FakeNFTMarketplace\r\n        if (proposal.yayVotes > proposal.nayVotes) {\r\n            uint256 nftPrice = fakeNftMarket.getPrice();\r\n            require(address(this).balance >= nftPrice, \"NOT_ENOUGH_FUNDS\");\r\n            fakeNftMarket.purchase{value: nftPrice}(proposal.nftTokenId);\r\n        }\r\n        proposal.executed = true;\r\n    }\r\n\r\n    // allow only the deployer to withdraw ETH\r\n    function withdrawEther() external onlyContractOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    //The following two functions allow the contract to accept ETH deposits\r\n    // directly from a wallet without calling a function\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"
    },
    "contracts/ICryptoDevs.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\ninterface ICryptoDevs {\r\n    /// @dev balanceOf returns the number of NFTs owned by the given address\r\n    /// @param owner - address to fetch number of NFTs for\r\n    /// @return Returns the number of NFTs owned\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /// @dev tokenOfOwnerByIndex returns a tokenID at given index for owner\r\n    /// @param owner - address to fetch the NFT TokenID for\r\n    /// @param index - index of NFT in owned tokens array to fetch\r\n    /// @return Returns the TokenID of the NFT\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n"
    },
    "contracts/IFakeNFTMarket.sol": {
      "content": "pragma solidity ^0.8.1;\r\n\r\ninterface IFakeNFTMarket {\r\n    // purchase nft from the marketplace\r\n    function purchase(uint256 _tokenId) external payable;\r\n\r\n    // get the nnft price\r\n    function getPrice() external view returns (uint256);\r\n\r\n    // check available nfts\r\n    function available(uint256 _tokenId) external view returns (bool);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FakeNFTMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\ncontract FakeNFTMarket {\n    ///@dev maintain a fake mapping for tokenids of NFT to addresses\n    mapping(uint256 => address) public tokenIdToAddress;\n    ///@dev set the purchase price for each nft\n    uint256 constant PRICE = 0.01 ether;\n\n    ///@dev the purchase() allows a user to purchase an nft with the unique ID and sets the caller as the owner\n    function purchase(uint256 _tokenId) external payable {\n        // check that the sent amount is 0.01eth or higher\n        require(msg.value >= PRICE, \"You need more ETH\");\n        // set the token id to the caller of the function\n        tokenIdToAddress[_tokenId] = msg.sender;\n    }\n\n    // getter function to return price of NFT\n    function getPrice() public view returns (uint256) {\n        return PRICE;\n    }\n\n    ///@dev check using the id to know if an NFT is available\n    function available(uint256 _tokenId) external view returns (bool) {\n        // address(0) = 0x0000000000000000000000000000000000000000\n        // This is the default value for addresses in Solidity\n        if(tokenIdToAddress[_tokenId] == address(0)){\n            return true;\n        }\n        return false;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}