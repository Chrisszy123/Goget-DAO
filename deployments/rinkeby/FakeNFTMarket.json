{
  "address": "0x7F58B8F3b3c16F9d6f5d6a4670A69068037c1c61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a06f15eb61c5560aa71d65e87d9a9249a618f9aa8541c3f8a0a5b1ab7159024",
  "receipt": {
    "to": null,
    "from": "0xb7b328821cE10D2ebfBA4c4f153DC4A8c7a607CB",
    "contractAddress": "0x7F58B8F3b3c16F9d6f5d6a4670A69068037c1c61",
    "transactionIndex": 10,
    "gasUsed": "285477",
    "logsBloom": "0x
    "blockHash": "0x251638c0d32415b5c839a2ac0e636a0b8142470bdedb4c3f4111ecd5846f09be",
    "transactionHash": "0x5a06f15eb61c5560aa71d65e87d9a9249a618f9aa8541c3f8a0a5b1ab7159024",
    "logs": [],
    "blockNumber": 11416036,
    "cumulativeGasUsed": "2249597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "17336f2de2b195d9902d7268cb67e3a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"available(uint256)\":{\"details\":\"check using the id to know if an NFT is available\"},\"purchase(uint256)\":{\"details\":\"the purchase() allows a user to purchase an nft with the unique ID and sets the caller as the owner\"}},\"stateVariables\":{\"PRICE\":{\"details\":\"set the purchase price for each nft\"},\"tokenIdToAddress\":{\"details\":\"maintain a fake mapping for tokenids of NFT to addresses\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FakeNFTMarket.sol\":\"FakeNFTMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FakeNFTMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ncontract FakeNFTMarket {\\n    ///@dev maintain a fake mapping for tokenids of NFT to addresses\\n    mapping(uint256 => address) public tokenIdToAddress;\\n    ///@dev set the purchase price for each nft\\n    uint256 constant PRICE = 0.01 ether;\\n\\n    ///@dev the purchase() allows a user to purchase an nft with the unique ID and sets the caller as the owner\\n    function purchase(uint256 _tokenId) external payable {\\n        // check that the sent amount is 0.01eth or higher\\n        require(msg.value >= PRICE, \\\"You need more ETH\\\");\\n        // set the token id to the caller of the function\\n        tokenIdToAddress[_tokenId] = msg.sender;\\n    }\\n\\n    // getter function to return price of NFT\\n    function getPrice() public view returns (uint256) {\\n        return PRICE;\\n    }\\n\\n    ///@dev check using the id to know if an NFT is available\\n    function available(uint256 _tokenId) external view returns (bool) {\\n        // address(0) = 0x0000000000000000000000000000000000000000\\n        // This is the default value for addresses in Solidity\\n        if(tokenIdToAddress[_tokenId] == address(0)){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xd51cf11cb5a1e68c8f1e0aff493a1bad87d3862da7898910c1d1a089f0d5aa15\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610437806100206000396000f3fe60806040526004361061003f5760003560e01c806308bb76a51461004457806396e494e81461008157806398d5fdca146100be578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b5061006b6004803603810190610066919061029b565b610105565b6040516100789190610309565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a3919061029b565b610138565b6040516100b5919061033f565b60405180910390f35b3480156100ca57600080fd5b506100d36101b3565b6040516100e09190610369565b60405180910390f35b61010360048036038101906100fe919061029b565b6101c2565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156101a957600190506101ae565b600090505b919050565b6000662386f26fc10000905090565b662386f26fc1000034101561020c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610203906103e1565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b61027881610265565b811461028357600080fd5b50565b6000813590506102958161026f565b92915050565b6000602082840312156102b1576102b0610260565b5b60006102bf84828501610286565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102f3826102c8565b9050919050565b610303816102e8565b82525050565b600060208201905061031e60008301846102fa565b92915050565b60008115159050919050565b61033981610324565b82525050565b60006020820190506103546000830184610330565b92915050565b61036381610265565b82525050565b600060208201905061037e600083018461035a565b92915050565b600082825260208201905092915050565b7f596f75206e656564206d6f726520455448000000000000000000000000000000600082015250565b60006103cb601183610384565b91506103d682610395565b602082019050919050565b600060208201905081810360008301526103fa816103be565b905091905056fea2646970667358221220cc720a4aeb97b70584555fc4613c49c460943dce7f7a318e3075264520c5ba8664736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806308bb76a51461004457806396e494e81461008157806398d5fdca146100be578063efef39a1146100e9575b600080fd5b34801561005057600080fd5b5061006b6004803603810190610066919061029b565b610105565b6040516100789190610309565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a3919061029b565b610138565b6040516100b5919061033f565b60405180910390f35b3480156100ca57600080fd5b506100d36101b3565b6040516100e09190610369565b60405180910390f35b61010360048036038101906100fe919061029b565b6101c2565b005b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156101a957600190506101ae565b600090505b919050565b6000662386f26fc10000905090565b662386f26fc1000034101561020c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610203906103e1565b60405180910390fd5b3360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b61027881610265565b811461028357600080fd5b50565b6000813590506102958161026f565b92915050565b6000602082840312156102b1576102b0610260565b5b60006102bf84828501610286565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102f3826102c8565b9050919050565b610303816102e8565b82525050565b600060208201905061031e60008301846102fa565b92915050565b60008115159050919050565b61033981610324565b82525050565b60006020820190506103546000830184610330565b92915050565b61036381610265565b82525050565b600060208201905061037e600083018461035a565b92915050565b600082825260208201905092915050565b7f596f75206e656564206d6f726520455448000000000000000000000000000000600082015250565b60006103cb601183610384565b91506103d682610395565b602082019050919050565b600060208201905081810360008301526103fa816103be565b905091905056fea2646970667358221220cc720a4aeb97b70584555fc4613c49c460943dce7f7a318e3075264520c5ba8664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "available(uint256)": {
        "details": "check using the id to know if an NFT is available"
      },
      "purchase(uint256)": {
        "details": "the purchase() allows a user to purchase an nft with the unique ID and sets the caller as the owner"
      }
    },
    "stateVariables": {
      "PRICE": {
        "details": "set the purchase price for each nft"
      },
      "tokenIdToAddress": {
        "details": "maintain a fake mapping for tokenids of NFT to addresses"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 508,
        "contract": "contracts/FakeNFTMarket.sol:FakeNFTMarket",
        "label": "tokenIdToAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}